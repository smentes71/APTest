@model IEnumerable<DeviceStatusHistory>
@{
    ViewData["Title"] = "Durum Raporları";
    var devices = (IEnumerable<RaspberryPi>)ViewBag.Devices;
}

<div class="space-y-6">
    <div class="bg-white shadow-md rounded-lg p-6">
        <h2 class="text-2xl font-bold text-gray-900 mb-6">Durum Raporları</h2>

        <div class="grid grid-cols-1 gap-4 mb-6">
            <div class="flex space-x-4">
                <div class="flex-1">
                    <label class="block text-sm font-medium text-gray-700">Cihaz</label>
                    <select id="deviceSelect" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200">
                        <option value="">Tüm Cihazlar</option>
                        @foreach (var device in devices)
                        {
                            <option value="@device.Id">@device.Name</option>
                        }
                    </select>
                </div>
                <div class="flex-1">
                    <label class="block text-sm font-medium text-gray-700">Başlangıç Tarihi</label>
                    <input type="date" id="startDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200" />
                </div>
                <div class="flex-1">
                    <label class="block text-sm font-medium text-gray-700">Bitiş Tarihi</label>
                    <input type="date" id="endDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200" />
                </div>
                <div class="flex items-end">
                    <button onclick="updateCharts()" class="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700">
                        Güncelle
                    </button>
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="bg-white p-4 rounded-lg shadow">
                <h3 class="text-lg font-semibold mb-4">Online/Offline Durumu</h3>
                <div style="height: 400px; position: relative;">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
            <div class="bg-white p-4 rounded-lg shadow">
                <h3 class="text-lg font-semibold mb-4">Açık/Kapalı Durumu</h3>
                <div style="height: 400px; position: relative;">
                    <canvas id="accessChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let statusChart = null;
        let accessChart = null;

        function destroyCharts() {
            if (statusChart) {
                statusChart.destroy();
                statusChart = null;
            }
            if (accessChart) {
                accessChart.destroy();
                accessChart = null;
            }
        }

        function createChart(ctx, type) {
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [
                        {
                            label: type === 'status' ? 'Online' : 'Açık',
                            data: [],
                            borderColor: type === 'status' ? 'rgb(34, 197, 94)' : 'rgb(59, 130, 246)',
                            backgroundColor: type === 'status' ? 'rgba(34, 197, 94, 0.1)' : 'rgba(59, 130, 246, 0.1)',
                            tension: 0.4,
                            fill: true
                        },
                        {
                            label: type === 'status' ? 'Offline' : 'Kapalı',
                            data: [],
                            borderColor: type === 'status' ? 'rgb(239, 68, 68)' : 'rgb(234, 179, 8)',
                            backgroundColor: type === 'status' ? 'rgba(239, 68, 68, 0.1)' : 'rgba(234, 179, 8, 0.1)',
                            tension: 0.4,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });
        }

        async function updateCharts() {
            const deviceId = document.getElementById('deviceSelect').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            try {
                const response = await fetch(`/Reports/GetChartData?deviceId=${deviceId}&startDate=${startDate}&endDate=${endDate}`);
                const data = await response.json();

                if (data.error) {
                    console.error('Server error:', data.error);
                    return;
                }

                console.log('Chart data:', data);

                destroyCharts();

                const statusCtx = document.getElementById('statusChart').getContext('2d');
                statusChart = createChart(statusCtx, 'status');
                statusChart.data.labels = data.statusData.map(d => d.Date);
                statusChart.data.datasets[0].data = data.statusData.map(d => d.Online);
                statusChart.data.datasets[1].data = data.statusData.map(d => d.Offline);
                statusChart.update();

                const accessCtx = document.getElementById('accessChart').getContext('2d');
                accessChart = createChart(accessCtx, 'access');
                accessChart.data.labels = data.accessData.map(d => d.Date);
                accessChart.data.datasets[0].data = data.accessData.map(d => d.Open);
                accessChart.data.datasets[1].data = data.accessData.map(d => d.Closed);
                accessChart.update();

            } catch (error) {
                console.error('Error updating charts:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const today = new Date();
            const lastWeek = new Date(today);
            lastWeek.setDate(lastWeek.getDate() - 7);

            document.getElementById('startDate').value = lastWeek.toISOString().split('T')[0];
            document.getElementById('endDate').value = today.toISOString().split('T')[0];

            const statusCtx = document.getElementById('statusChart').getContext('2d');
            const accessCtx = document.getElementById('accessChart').getContext('2d');
            
            statusChart = createChart(statusCtx, 'status');
            accessChart = createChart(accessCtx, 'access');

            updateCharts();
        });
    </script>
}