@model IEnumerable<Rule>
@{
    ViewData["Title"] = "Rules";
    var devices = (IEnumerable<RaspberryPi>)ViewBag.Devices;
}

<div class="space-y-6">
    <div class="flex justify-between items-center">
        <h1 class="text-3xl font-bold text-gray-900">Rules</h1>
        <a href="@Url.Action("Add", "Rules")" class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
            <i class="fas fa-plus mr-2"></i>New Rule
        </a>
    </div>

    <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rule Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Device</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Command</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trigger</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var rule in Model)
                {
                    var device = devices.FirstOrDefault(d => d.Id == rule.DeviceId);
                    <tr>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">@rule.Name</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-500">@(device?.Name ?? "Unknown Device")</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-500">@rule.Command</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm text-gray-500">
                                @rule.TriggerType
                                @if (rule.TriggerType == TriggerType.IpAddress)
                                {
                                    <div class="text-xs text-gray-400">@rule.IpAddress</div>
                                }
                                else
                                {
                                    <div class="text-xs text-gray-400">@rule.ApiUrl</div>
                                }
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @(rule.Status == RuleStatus.Active ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800")">
                                @rule.Status
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="toggleRuleStatus('@rule.Id')" class="text-purple-600 hover:text-purple-900">
                                <i class="fas @(rule.Status == RuleStatus.Active ? "fa-toggle-on" : "fa-toggle-off")"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        async function toggleRuleStatus(ruleId) {
            try {
                const response = await fetch(`/Rules/ToggleStatus/${ruleId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message);
                    location.reload();
                } else {
                    showNotification(result.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Failed to update rule status', 'error');
            }
        }
    </script>
}