@model IEnumerable<RaspberryPi>

@{
    ViewData["Title"] = "Raspberry Pi Control Panel";
}

<div class="space-y-8">
    <div class="flex justify-between items-center">
        <h1 class="text-3xl font-bold text-gray-900">@ViewData["Title"]</h1>
        <button onclick="location.reload()"
                class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors">
            <i class="fas fa-sync-alt mr-2"></i>
            Refresh
        </button>
    </div>

    <div class="flex space-x-4 mb-6">
        <select id="locationFilter" class="rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200">
            <option value="">All Locations</option>
            @foreach (var location in Model.Select(d => d.Location).Distinct().Where(l => !string.IsNullOrEmpty(l)))
            {
                <option value="@location">@location</option>
            }
        </select>

        <select id="groupFilter" class="rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring focus:ring-purple-200">
            <option value="">All Groups</option>
            @foreach (var group in Model.Select(d => d.Group).Distinct().Where(g => !string.IsNullOrEmpty(g)))
            {
                <option value="@group">@group</option>
            }
        </select>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="deviceGrid">
        @if (Model != null && Model.Any())
        {
            @foreach (var pi in Model)
            {
                <div class="device-card bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow"
                     data-location="@pi.Location" data-group="@pi.Group">
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center space-x-3">
                            <i class="fas fa-desktop text-purple-600 text-2xl"></i>
                            <div>
                                <h3 class="font-semibold text-lg">@pi.Name</h3>
                                <p class="text-sm text-gray-500">@pi.IpAddress</p>
                                <p class="text-sm text-gray-500 mt-2">@pi.Location</p>
                                <p class="text-sm text-gray-500">@pi.Group</p>
                            </div>
                        </div>
                        <div>
                            <button onclick="togglePowerStatus('@pi.Id')" class="power-button">
                                <i class="fas @(pi.AccessStatus == AccessStatus.Open ? "fa-plug text-green-600" : "fa-plug text-red-600") text-xl hover:opacity-75 transition-opacity"></i>
                                @pi.AccessStatus
                            </button>

                            <span class="px-3 py-1 rounded-full text-sm @(pi.Status == PiStatus.Online ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                @pi.Status
                            </span>
                        </div>
                    </div>

                    <div class="flex justify-end space-x-2">
                        <button onclick='sendCommand(@Html.Raw(Json.Serialize(pi.IpAddress)), @Html.Raw(Json.Serialize("on")))'
                                class="p-2 text-green-600 hover:bg-red-50 rounded-full transition-colors"
                                title="Open">
                            <i class="fas fa-power-off"></i>
                        </button>
                        <button onclick='sendCommand(@Html.Raw(Json.Serialize(pi.IpAddress)), @Html.Raw(Json.Serialize("off")))'
                                class="p-2 text-red-600 hover:bg-red-50 rounded-full transition-colors"
                                title="Closed">
                            <i class="fas fa-power-off"></i>
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-span-3 text-center py-8">
                <p class="text-gray-500">No Raspberry Pi devices found.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        async function sendCommand(piip, command) {
            try {
                const payload = {
                    IpAddress: piip,
                    Command: command
                };

                const response = await fetch('/Home/SendCommand3', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                const data = await response.json();

                if (data.success) {
                    alert('Komut ba?ar?yla gönderildi');
                    location.reload();
                } else {
                    alert(data.message || 'Komut gönderilemedi');
                }
            } catch (error) {
                console.error('Hata:', error);
                alert('Komut gönderimi s?ras?nda bir hata olu?tu');
            }
        }

        function filterDevices() {
            const locationFilter = document.getElementById('locationFilter').value;
            const groupFilter = document.getElementById('groupFilter').value;

            document.querySelectorAll('.device-card').forEach(card => {
                const location = card.dataset.location;
                const group = card.dataset.group;

                const locationMatch = !locationFilter || location === locationFilter;
                const groupMatch = !groupFilter || group === groupFilter;

                card.style.display = locationMatch && groupMatch ? 'block' : 'none';
            });
        }

        document.getElementById('locationFilter').addEventListener('change', filterDevices);
        document.getElementById('groupFilter').addEventListener('change', filterDevices);
    </script>
}
